[comment encoding = UTF-8 /]
[module generateFiles('http://fr.ubo.collector')]

[template public generateFiles(root : DataCollector)]
[comment @main /]
[generatePubBrokerConfigurationFile(root)/]
[generateSubBrokerConfigurationFile(root)/]
[generateTopicConfigurationFile(root)/]
[generateSubscriberConfigurationFile(root)/]
[generatePublisherHeader(root)/]
[generatePublisherSource(root)/]
[generatePublisherSkeleton(root)/]
[generateSubscriberHeader(root)/]
[generateSubscriberSource(root)/]
[generateSubscriberSkeleton(root)/]
[/template]

[template public generatePubBrokerConfigurationFile(root : DataCollector)]
[let pub_broker : PubBroker = root.pubBroker]
[let sub_broker : SubBroker = root.subBroker]
[file ('conf/pub_broker.properties', false, 'UTF-8')]
[if (pub_broker.id.oclIsTypeOf(TcpIpEndpoint))]
[if (sub_broker.id.oclIsTypeOf(TcpIpEndpoint))]
BROKER_ENDPOINT=[pub_broker.id.oclAsType(TcpIpEndpoint).ipAddress + ':' + pub_broker.id.oclAsType(TcpIpEndpoint).port/]
PROXY_ENDPOINT=[sub_broker.id.oclAsType(TcpIpEndpoint).ipAddress + ':' + sub_broker.id.oclAsType(TcpIpEndpoint).port/]
LOG_PATH=[pub_broker.logPath/]
[/if]
[/if]
[/file]
[/let]
[/let]
[/template]

[template public generateSubBrokerConfigurationFile(root : DataCollector)]
[let sub_broker : SubBroker = root.subBroker]
[let pub_broker : PubBroker = root.pubBroker]
[file ('conf/sub_broker.properties', false, 'UTF-8')]
[if (sub_broker.id.oclIsTypeOf(TcpIpEndpoint))]
[if (pub_broker.id.oclIsTypeOf(TcpIpEndpoint))]
BROKER_ENDPOINT=[pub_broker.id.oclAsType(TcpIpEndpoint).ipAddress.concat(':').concat(pub_broker.id.oclAsType(TcpIpEndpoint).port.toString())/]
PROXY_ENDPOINT=[sub_broker.id.oclAsType(TcpIpEndpoint).ipAddress.concat(':').concat(sub_broker.id.oclAsType(TcpIpEndpoint).port.toString())/]
CONFIGURATION_PATH=[sub_broker.configurationPath/]
[/if]
[/if]
[/file]
[/let]
[/let]
[/template]

[template public generateTopicConfigurationFile(root : DataCollector)]
[file ('conf/topics.conf', false, 'UTF-8')]
[for (sensor : Sensor | root.drone.sensorsDrone)]
[for (measured_variable : MeasuredVariable | sensor.sensorMeasuredVariables)]
[let publisher : Publisher = root.publishers->select(publisher | publisher.publishedMeasures->includes(measured_variable))->first()]
[measured_variable.name.concat(',').concat(publisher.period.toString())/]
[/let]
[/for]
[/for]
[/file]
[/template]

[template public generateSubscriberConfigurationFile(root : DataCollector)]
[file ('conf/subscribers.conf', false, 'UTF-8')]
[for (subscriber : Subscriber | root.subscribers)]
[if (subscriber.id.oclIsTypeOf(TcpIpEndpoint))]
[subscriber.name.concat(',').concat(subscriber.monitoredMeasure.name).concat(',').concat(subscriber.period.toString()).concat(',').concat(subscriber.aggregation.toString()).concat(',').concat(subscriber.id.oclAsType(TcpIpEndpoint).ipAddress).concat(':').concat(subscriber.id.oclAsType(TcpIpEndpoint).port.toString())/]
[/if]
[/for]
[/file]
[/template]

[template public generatePublisherHeader(root : DataCollector)]
[file ('generated/Publisher.h', false, 'UTF-8')]
#ifndef MODD_PUBLISHER_H
#define MODD_PUBLISHER_H

#pragma once

#include <thread>
#include <vector>
#include <string>
#include <fstream>
#include <sstream>
#include <boost/asio.hpp>
#include "PublisherCore.h"

/**
 * @class Publisher
 * @brief Class that manages a publisher, acting as a high-level wrapper for PublisherCore.
 */
class Publisher
{
private:
    /** Reference to the I/O context for asynchronous operations. */
    boost::asio::io_context m_io_context;
    /** PubBroker TCP/IP ID. */
    TcpIpId m_id_pub_broker;
    /** Core publisher logic. */
    PublisherCore m_core_publisher;
    /** Dedicated thread for running the I/O context. */
    std::thread m_io_thread;
    /** To ensure that the I/O context remains active. */
    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> m_work_guard;
    /** Flag to prevent repeated shutdown. */
    std::atomic<bool> m_stopped{false};

    /**
     * @brief Start the I/O context in a separate thread to handle asynchronous operations.
     */
    void startIoContext();

public:
    /**
     * @brief Initialize a publisher instance.
     * @param name: Publisher ID.
     */
    Publisher(const std::string& name);

    /**
     * @brief Destructor that ensures proper shutdown of the publisher and its I/O thread.
     */
    ~Publisher();

    /**
     * @brief Publish a message to the PubBroker.
     * @param topic: Topic ID of the published measure.
     * @param timestamp: Timestamp of the measure.
     * @param value: Value of the measure.
     */
    void publish(const std::string& topic, long long timestamp, double value);

    /**
     * @brief Stop the I/O context, terminating asynchronous operations safely.
     */
    void stopIoContext();
};

#endif
[/file]
[/template]

[template public generatePublisherSource(root : DataCollector)]
[file ('generated/Publisher.cpp', false, 'UTF-8')]
#include "Publisher.h"

/**
 * @brief Initialize a publisher instance.
 * @param name: Publisher ID.
 */
Publisher::Publisher(const std::string& name) : m_id_pub_broker("[root.pubBroker.id.oclAsType(TcpIpEndpoint).ipAddress/]", [root.pubBroker.id.oclAsType(TcpIpEndpoint).port/]), m_core_publisher(name, m_id_pub_broker, m_io_context), m_work_guard(boost::asio::make_work_guard(m_io_context))
{
    startIoContext();
}

/**
 * @brief Destructor that ensures proper shutdown of the publisher and its I/O thread.
 */
Publisher::~Publisher()
{
    stopIoContext();
    if (m_io_thread.joinable())
    {
        m_io_thread.join();
    }
}

/**
 * @brief Publish a message to the PubBroker.
 * @param topic: Topic ID of the published measure.
 * @param timestamp: Timestamp of the measure.
 * @param value: Value of the measure.
 */
void Publisher::publish(const std::string& topic, long long timestamp, double value)
{
    if (m_stopped.load())
    {
        return;
    }
    // All calls to publish() are safe to make from any thread
    // The actual write is posted to the I/O thread
    boost::asio::post(m_io_context, ['['/]this, topic, timestamp, value]()
    {
        m_core_publisher.publish(topic, timestamp, value);
    });
}

/**
 * @brief Start the I/O context in a separate thread to handle asynchronous operations.
 */
void Publisher::startIoContext()
{
    m_io_thread = std::thread(['['/]this[']'/](){ m_io_context.run(); });
}

/**
 * @brief Stop the I/O context, terminating asynchronous operations safely.
 */
void Publisher::stopIoContext()
{
    if (!m_stopped.exchange(true))
    {
        m_work_guard.reset();
        m_io_context.stop();
    }
}
[/file]
[/template]

[template public generatePublisherSkeleton(root : DataCollector)]
[for (publisher : Publisher | root.publishers)]
[file ('main/main_publisher_'.concat(publisher.name.toLowerCase()).concat('.cpp'), false, 'UTF-8')]
#include <memory>
#include <csignal>
#include <boost/asio.hpp>
#include <boost/log/core.hpp>
#include <boost/log/trivial.hpp>
#include <boost/log/expressions.hpp>
#include "Publisher.h"

/** Global atomic to signal shutdown. */
std::atomic<bool> shutdown_requested{false};
/** Global publisher pointer. */
std::unique_ptr<Publisher> publisher;

/**
 * @brief Signal handler to catch Ctrl-C and initiate graceful shutdown.
 * @param signal: Caught signal.
 */
void handleSignal(int signal)
{
    if (signal == SIGINT)
    {
        if (!shutdown_requested.exchange(true))
        {
            if (publisher)
            {
                BOOST_LOG_TRIVIAL(info) << "['['/]Main Publisher[']'/] Interrupt signal received. Stopping publisher";
                publisher->stopIoContext();
            }
        }
    }
}


int main()
{
    // Set logging severity level
    boost::log::core::get()->set_filter(boost::log::trivial::severity >= boost::log::trivial::info);
    std::signal(SIGINT, handleSignal);
    // Create publisher instance
    publisher = std::make_unique<Publisher>("[publisher.name/]");
    // For data publication
[for (topic : MeasuredVariable | publisher.publishedMeasures)]
    // publisher->publish("[topic.name/]", timestamp, value);
[/for]
    return 0;
}
[/file]
[/for]
[/template]

[template public generateSubscriberHeader(root : DataCollector)]
[file ('generated/Subscriber.h', false, 'UTF-8')]
#ifndef MODD_SUBSCRIBER_H
#define MODD_SUBSCRIBER_H

#pragma once

#include <thread>
#include <memory>
#include <boost/asio.hpp>
#include "SubscriberCore.h"

/**
 * @class Subscriber
 * @brief Class that manages a subscriber, acting as a high-level wrapper for SubscriberCore.
 */
class Subscriber
{
private:
    /** Reference to the I/O context for asynchronous operations. */
    boost::asio::io_context m_io_context;
    /** SubBroker TCP/IP ID. */
    TcpIpId m_id_sub_broker;
    /** Core subscriber logic. */
    SubscriberCore m_subscriber_core;
    /** Dedicated thread for running the I/O context. */
    std::thread m_io_thread;
    /** To ensure that the I/O context remains active. */
    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> m_work_guard;
    /** Flag to prevent repeated shutdown. */
    std::atomic<bool> m_stopped{false};

    /**
     * @brief Start the I/O context in a separate thread to handle asynchronous operations.
     */
    void startIoContext();

public:
    /**
     * @brief Initialize a subscriber instance.
     * @param name: Subscriber ID.
     * @param topic: Topic of interest for the subscriber.
     * @param period: Delivery interval in seconds.
     * @param aggregation_type: Aggregation type requested by the subscriber.
     */
    Subscriber(const std::string& name, const std::string& topic, double period, AggregationType aggregation_type);

    /**
     * @brief Destructor that ensures proper shutdown of the subscriber and its I/O thread.
     */
    ~Subscriber();

    /**
     * @brief Start subscription and listen to incoming messages.
     */
    void start();

    /**
     * @brief Stop the I/O context, terminating asynchronous operations safely.
     */
    void stopIoContext();

    /**
     * @brief Register a callback to handle incoming messages.
     * @tparam T: Callable type matching the signature of the emitted signal in SubscriberCore.
     * @param callback: Function or lambda that should be invoked whenever data are received.
     */
    template <typename T>
    void setDataCallback(T&& callback)
    {
        m_subscriber_core.onDataReceived.connect(std::forward<T>(callback));
    }
};

#endif
[/file]
[/template]

[template public generateSubscriberSource(root : DataCollector)]
[file ('generated/Subscriber.cpp', false, 'UTF-8')]
#include "Subscriber.h"

/**
 * @brief Initialize a subscriber instance.
 * @param name: Subscriber ID.
 * @param topic: Topic of interest for the subscriber.
 * @param period: Delivery interval in seconds.
 * @param aggregation_type: Aggregation type requested by the subscriber.
 */
Subscriber::Subscriber(const std::string& name, const std::string& topic, double period, AggregationType aggregation_type) : m_id_sub_broker("[root.subBroker.id.oclAsType(TcpIpEndpoint).ipAddress/]", [root.subBroker.id.oclAsType(TcpIpEndpoint).port/]), m_subscriber_core(name, m_id_sub_broker, topic, period, aggregation_type, m_io_context), m_work_guard(boost::asio::make_work_guard(m_io_context))
{

}

/**
 * @brief Destructor that ensures proper shutdown of the subscriber and its I/O thread.
 */
Subscriber::~Subscriber()
{
    stopIoContext();
    if (m_io_thread.joinable())
    {
        m_io_thread.join();
    }
}

/**
 * @brief Start subscription and listen to incoming messages.
 */
void Subscriber::start()
{
    m_subscriber_core.subscribe();
    m_subscriber_core.read();
    startIoContext();
}

/**
 * @brief Start the I/O context in a separate thread to handle asynchronous operations.
 */
void Subscriber::startIoContext()
{
    m_io_thread = std::thread(['['/]this[']'/](){ m_io_context.run(); });
}

/**
 * @brief Stop the I/O context, terminating asynchronous operations safely.
 */
void Subscriber::stopIoContext()
{
    if (!m_stopped.exchange(true))
    {
        m_work_guard.reset();
        m_io_context.stop();
    }
}
[/file]
[/template]

[template public generateSubscriberSkeleton(root : DataCollector)]
[file ('main/main_client.cpp', false, 'UTF-8')]
#include <thread>
#include <vector>
#include <boost/log/core.hpp>
#include <boost/log/trivial.hpp>
#include <boost/log/expressions.hpp>
#include "TcpIpId.h"
#include "Subscriber.h"

/**
 * @struct SubscriberConfig
 * @brief Structure to hold subscriber information.
 */
struct SubscriberConfig
{
    std::string name;
    double period = 0.0;
    AggregationType aggregation_type = AggregationType::DEFAULT;
    std::string topic;
};

int main()
{
    // Set logging severity level
    boost::log::core::get()->set_filter(boost::log::trivial::severity >= boost::log::trivial::info);

    // Parse subscribers information
    std::vector<SubscriberConfig> subscribers_configurations = {
[for (subscriber : Subscriber | root.subscribers)]
                                             {"[subscriber.name/]", [subscriber.period/], AggregationType::[if (subscriber.aggregation = 'ALL')]'NONE'[else][subscriber.aggregation/][/if], "[subscriber.monitoredMeasure.name/]"}[if (subscriber <> root.subscribers->last())], [/if]
[/for]
                                            };

    const size_t subscribers_number = [root.subscribers->size()/];
    std::vector<std::unique_ptr<Subscriber>> subscribers;

    // Create subscribers instances and set up callbacks
    for (size_t i = 0; i < subscribers_number; ++i)
    {
        subscribers.emplace_back(std::make_unique<Subscriber>(subscribers_configurations['['/]i[']'/].name, subscribers_configurations['['/]i[']'/].topic, subscribers_configurations['['/]i[']'/].period, subscribers_configurations['['/]i[']'/].aggregation_type));
        subscribers.back()->start();
        subscribers.back()->setDataCallback(['['/][']'/](const std::string& subscriber_name, unsigned long long int timestamp, double value)
                                            {
                                            BOOST_LOG_TRIVIAL(info) << "['['/]Main Client[']'/] Subscriber " << subscriber_name << " received (" << timestamp << ", " << value << ")";
                                            });

    }

    std::cout << "['['/]Main Client[']'/] Subscribers are running. Press ENTER to exit" << std::endl;
    std::cin.get();

    return 0;
}
[/file]
[/template]