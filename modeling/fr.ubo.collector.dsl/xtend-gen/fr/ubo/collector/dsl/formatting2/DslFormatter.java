/**
 * generated by Xtext 2.14.0
 */
package fr.ubo.collector.dsl.formatting2;

import com.google.inject.Inject;
import fr.ubo.collector.DataCollector;
import fr.ubo.collector.Drone;
import fr.ubo.collector.PubBroker;
import fr.ubo.collector.Publisher;
import fr.ubo.collector.Sensor;
import fr.ubo.collector.SubBroker;
import fr.ubo.collector.Subscriber;
import fr.ubo.collector.dsl.services.DslGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class DslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private DslGrammarAccess _dslGrammarAccess;
  
  protected void _format(final DataCollector dataCollector, @Extension final IFormattableDocument document) {
    document.<Drone>format(dataCollector.getDrone());
    document.<PubBroker>format(dataCollector.getPubBroker());
    document.<SubBroker>format(dataCollector.getSubBroker());
    EList<Publisher> _publishers = dataCollector.getPublishers();
    for (final Publisher publisher : _publishers) {
      document.<Publisher>format(publisher);
    }
    EList<Subscriber> _subscribers = dataCollector.getSubscribers();
    for (final Subscriber subscriber : _subscribers) {
      document.<Subscriber>format(subscriber);
    }
  }
  
  protected void _format(final Drone drone, @Extension final IFormattableDocument document) {
    EList<Sensor> _sensorsDrone = drone.getSensorsDrone();
    for (final Sensor sensor : _sensorsDrone) {
      document.<Sensor>format(sensor);
    }
  }
  
  public void format(final Object drone, final IFormattableDocument document) {
    if (drone instanceof XtextResource) {
      _format((XtextResource)drone, document);
      return;
    } else if (drone instanceof Drone) {
      _format((Drone)drone, document);
      return;
    } else if (drone instanceof DataCollector) {
      _format((DataCollector)drone, document);
      return;
    } else if (drone instanceof EObject) {
      _format((EObject)drone, document);
      return;
    } else if (drone == null) {
      _format((Void)null, document);
      return;
    } else if (drone != null) {
      _format(drone, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(drone, document).toString());
    }
  }
}
